给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。

请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

你可以假设 nums1 和 nums2 不会同时为空。

 

示例 1:

nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0
示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5


解题：
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if not nums1:
            if len(nums2)%2 == 0:
                return (nums2[len(nums2)//2]+nums2[len(nums2)//2-1])/2
            return nums2[len(nums2)//2]
        if not nums2:
            if len(nums1)%2 == 0:
                return (nums1[len(nums1)//2]+nums1[len(nums1)//2-1])/2
            return nums1[len(nums1)//2]
        if (len(nums1)+len(nums2))%2 == 0:
            nums3 = []
            left = 0
            right = 0
            for i in range((len(nums1)+len(nums2))//2+1):
                if len(nums1) > left and len(nums2) > right:
                    if nums1[left]<nums2[right]:
                        nums3.append(nums1[left])
                        left += 1
                    else:
                        nums3.append(nums2[right])
                        right+=1
                else:
                    if len(nums1) == left:
                        nums3.append(nums2[right])
                        right+=1
                    else:
                        nums3.append(nums1[left])
                        left+=1
            return (nums3.pop()+nums3.pop())/2
        else:
            flag = None
            left = 0
            right = 0
            for i in range((len(nums1)+len(nums2))//2+1):
                if len(nums1) > left and len(nums2) > right:
                        if nums1[left]<nums2[right]:
                            flag = nums1[left]
                            left += 1
                        else:
                            flag = nums2[right]
                            right+=1
                else:
                    if len(nums1) == left:
                        flag = nums2[right]
                        right+=1
                    else:
                        flag = nums1[left]
                        left+=1
            return flag